{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"ERC20BridgeSource": {
				"description": "DEX sources to aggregate.",
				"enum": [
					"Native",
					"Uniswap",
					"Uniswap_V2",
					"Curve",
					"LiquidityProvider",
					"MultiBridge",
					"Balancer",
					"Balancer_V2",
					"CREAM",
					"Bancor",
					"MakerPsm",
					"mStable",
					"Mooniswap",
					"MultiHop",
					"Shell",
					"SushiSwap",
					"DODO",
					"DODO_V2",
					"CryptoCom",
					"KyberDMM",
					"Component",
					"Saddle",
					"xSigma",
					"Uniswap_V3",
					"Curve_V2",
					"Lido",
					"ShibaSwap",
					"Aave_V2",
					"Compound",
					"Synapse",
					"BancorV3",
					"PancakeSwap",
					"PancakeSwap_V2",
					"BiSwap",
					"MDex",
					"KnightSwap",
					"BakerySwap",
					"Nerve",
					"Belt",
					"Ellipsis",
					"ApeSwap",
					"CheeseSwap",
					"ACryptoS",
					"QuickSwap",
					"Dfyn",
					"WaultSwap",
					"FirebirdOneSwap",
					"IronSwap",
					"MeshSwap",
					"Pangolin",
					"TraderJoe",
					"Platypus",
					"GMX",
					"UbeSwap",
					"MobiusMoney",
					"SpiritSwap",
					"SpookySwap",
					"Beethovenx",
					"MorpheusSwap",
					"Yoshi",
					"Geist",
					"Velodrome"
				],
				"type": "string"
			},
			"QuoteParams": {
				"properties": {
					"sellToken": {
						"type": "string"
					},
					"buyToken": {
						"type": "string"
					},
					"sellAmount": {
						"type": "string"
					},
					"buyAmount": {
						"type": "string"
					},
					"takerAddress": {
						"type": "string"
					},
					"slippagePercentage": {
						"type": "string"
					},
					"excludedSources": {
						"type": "string"
					}
				},
				"required": [
					"sellToken",
					"buyToken"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "Hyper DEX swap API.",
		"version": "1.0.0",
		"description": "The Hyper DEX API. In aggregate, the APIs provide interfaces to Hyper DEX liquidity. Everything can be run monolithically via yarn start and docker-compose up as described in Getting Started."
	},
	"openapi": "3.0.0",
	"paths": {
		"/sources": {
			"get": {
				"operationId": "GetSources",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/ERC20BridgeSource"
									},
									"type": "array"
								},
								"examples": {
									"Example 1": {
										"value": [
											"Uniswap",
											"Uniswap_V2",
											"Uniswap_V3"
										]
									}
								}
							}
						}
					}
				},
				"description": "Returns supported liquidity sources for current network",
				"summary": "Liquidity Sources",
				"tags": [
					"Source"
				],
				"security": [],
				"parameters": []
			}
		},
		"/swap/quote": {
			"post": {
				"operationId": "PostPrice",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {},
								"examples": {
									"Example 1": {
										"value": {
											"sellToken": "0xaD6D458402F60fD3Bd25163575031ACDce07538D",
											"buyToken": "0x07865c6E87B9F70255377e024ace6630C1Eaa37F",
											"sellAmount": "9995002498750625",
											"takerAddress": "0xf18A3af576c7871fEA9f8F3E54e8d0E71C98F206",
											"slippagePercentage": "0.01",
											"excludedSources": "Uniswap,Uniswap_V3"
										}
									}
								}
							}
						}
					}
				},
				"description": "Nearly identical to /swap/quote, but with a few key differences:\nRather than returning a transaction that can be submitted to an Ethereum node,\nthis resource simply indicates the pricing that would be\navailable for an analogous call to /swap/quote.",
				"summary": "Get Swap quote",
				"tags": [
					"Swap"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/QuoteParams"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	],
	"tags": [
		{
			"name": "Source"
		}
	]
}